#include "charEncoding.hpp"

namespace // internal parts
{
    enum internalCharacterClass : byte
    {
		// Class	// Extermal Class
		XXX	= 0,	// Unassigned
		NON,  		// NonCharacter
		CTR,  		// Control
		TAB,		//   HorizontalTab
		CNL,  		//   ControlAndNewline
		CFM,		//   ControlAndFormat
		FMT,  		// Format
		SPC,  		// Whitespace
		HSP,  		//   HorizontalSpace
		NWL,		//   Newline
		PUN,  		// Punctuation
		NUM,  		// Number
		DIG, 		//   Digit
		LTN,		//   LetterNumber
		LON,		//     LowercaseNumber
		UPN,		//     UppercaseNumber
		LTR, 		// Letter
		LOW, 		//   LowercaseLetter
		TIT, 		//   TitlecaseLetter
		UPP, 		//     UppercaseLetter
		MOD, 		// Modifier
		NMO, 		//   NonSpacingModifier
		SMO, 		//   SpacingModifier
		LMO,		//     ModifierLetter
		SYM, 		// Symbol
		MAT, 		//   MathSymbol
		SYL,		//   LetterAsSymbol
		SYW,		//     LowercaseSymbol
		SYU,		//     UppercaseSymbol
		PRI, 		// Private
		SUR, 		// Surrogate
		BOM 		// ByteOrderMark
    };
    
    const uint32_t characterClassTable[32] =
    {
		0b00000000000000000000, 0b10000000000000000000, 0b00000000000000000001,
		0b00000000000000001101, 0b00000000000000010101, 0b00000000000000000011,
		0b00000000000000000010, 0b00000000000000000100, 0b00000000000000001100,
		0b00000000000000010100, 0b00000000000000100000, 0b00000000000001000000, 
		0b00000000000011000000, 0b00000000000101000000, 0b00000000001101000000, 
		0b00000000110101000000, 0b00000000000100000000, 0b00000000001100000000, 
		0b00000000010100000000, 0b00000000110100000000, 0b00000001000000000000, 
		0b00000011000000000000, 0b00000101000000000000, 0b00000101000100000000, 
		0b00001000000000000000, 0b00011000000000000000, 0b00001000000100000000, 
		0b00001000001100000000, 0b00001000110100000000, 0b00100000000000000000, 
		0b01000000000000000000, 0b00000000000000000011
	};
	
	const std::string characterClassNamesTable[32] =
	{
		"unassigned", "non-character", "control code", "control / horizontal space",
		"control / newline", "control / format", "format", "whitespace", 
		"horizontal space", "newline", "punctuation", "number", "digit",
		"letter-number", "lowercase letter-number", "uppercase letter-number", "letter",
		"lowercase letter", "titlecase letter", "uppercase letter", "modifier",
		"non-spacing modifier", "spacing modifier", "modifier-letter", "symbol",
		"mathematical symbol", "letter as a symbol", "lowercase letter as a symbol",
		"uppercase letter as a symbol", "private", "surrogate", "byte order mark"
	};

    const internalCharacterClass characterClass_BMP[65536] =
    {
		// Macro to fill 1 line (16 entries) (_0 to _F) with the same value
		#define x16(C) C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C
		// Macro to fill 4 lines (64 entries) with the same value
		#define x64(C) x16(C), x16(C), x16(C), x16(C)
		// Macro to fill 32 lines (512 entries) with the same value
		#define x512(C) x64(C), x64(C), x64(C), x64(C), x64(C), x64(C), x64(C), x64(C)
		
		// Basic Latin (ASCII)
		CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, TAB, CNL, CNL, CNL, CNL, CTR, CTR,		
		CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR,
		HSP, PUN, PUN, SYM, SYM, MAT, SYM, PUN, PUN, PUN, PUN, MAT, PUN, PUN, PUN, PUN,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, PUN, PUN, MAT, MAT, MAT, PUN,
		SYM, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, PUN, SYM, PUN, SYM, SYM,
		SYM, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, PUN, MAT, PUN, MAT, CTR,
        // Latin-1 Supplement
		CTR, CTR, CFM, CFM, CTR, CNL, CTR, CTR, CFM, CFM, CFM, CFM, CFM, CTR, CTR, CTR,
		CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR, CTR,
		HSP, PUN, SYM, SYM, SYM, SYM, SYM, PUN, SYM, SYM, SYL, PUN, MAT, FMT, SYM, SYM,
		SYM, MAT, NUM, NUM, SYM, SYW, PUN, PUN, SYM, NUM, SYL, PUN, NUM, NUM, NUM, PUN,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, MAT, UPP, UPP, UPP, UPP, UPP, UPP, UPP, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, MAT, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
        // Latin Extended-A
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP,
		LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, UPP, LOW, UPP, LOW, UPP, LOW, LOW,
        // Latin Extended-B
		LOW, UPP, UPP, LOW, UPP, LOW, UPP, UPP, LOW, UPP, UPP, UPP, LOW, LOW, UPP, LOW,
		UPP, UPP, LOW, UPP, UPP, LOW, UPP, UPP, UPP, LOW, LOW, LOW, UPP, UPP, LOW, UPP,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, UPP, LOW, UPP, LOW, LOW, UPP, LOW, UPP, UPP,
		LOW, UPP, UPP, UPP, LOW, UPP, LOW, UPP, UPP, LOW, LOW, LOW, UPP, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, UPP, TIT, LOW, UPP, TIT, LOW, UPP, TIT, LOW, UPP, LOW, UPP,
		LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		LOW, UPP, TIT, LOW, UPP, LOW, UPP, UPP, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		UPP, LOW, UPP, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, LOW, UPP, UPP, LOW,
		UPP, UPP, LOW, UPP, UPP, UPP, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, 
		// IPA Extensions
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		// Spacing Modifier Letters
		LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO,
		LMO, LMO, SMO, SMO, SMO, SMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO,
		LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, SYM, SYM, SYM, SYM, SYM, SYM, LMO, LMO,
		LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO,
		LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO,
		// Combining Diacritical Marks
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		// Greek and Coptic
		UPP, LOW, UPP, LOW, SMO, SMO, UPP, LOW, XXX, XXX, LMO, LOW, LOW, LOW, PUN, UPP,
		XXX, XXX, XXX, XXX, SYM, SYM, UPP, PUN, UPP, UPP, UPP, XXX, UPP, XXX, UPP, UPP,
		LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, XXX, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP,
		LOW, LOW, UPP, UPP, UPP, LOW, LOW, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		LOW, LOW, LOW, LOW, UPP, LOW, LOW, UPP, LOW, UPP, UPP, LOW, SYW, UPP, UPP, UPP,
		// Cyrillic
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, SYM, NMO, NMO, NMO, NMO, NMO, NMO, NMO, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		// Cyrillic Supplement
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		// Armenian
		XXX, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, 
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, XXX, XXX, LMO, PUN, PUN, PUN, PUN, PUN, PUN,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, PUN, PUN, XXX, XXX, SYM, SYM, SYM,
		// Hebrew
		XXX, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, PUN, NMO,
		PUN, NMO, NMO, PUN, NMO, NMO, PUN, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, LTR,
		LTR, LTR, LTR, PUN, PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Arabic
		FMT, FMT, FMT, FMT, FMT, FMT, MAT, MAT, MAT, MAT, MAT, SYM, PUN, PUN, SYM, SYM,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, PUN, FMT, XXX, PUN, PUN,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, MAT, PUN, PUN, PUN, LTR, LTR,
		NMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, PUN, LTR, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, SYM, NMO,
		NMO, NMO, NMO, NMO, NMO, LMO, LMO, NMO, NMO, SYM, NMO, NMO, NMO, NMO, LTR, LTR,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, LTR, LTR, LTR, SYM, SYM, LTR,
		// Syriac
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, XXX, FMT,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX, XXX, LTR, LTR, LTR,
		// Arabic Supplement
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		// Thaana
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// NKo
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, LMO, LMO, SYM, SYM, PUN, PUN, LMO, XXX, XXX, NMO, SYM, SYM,
		// Samaritan
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, NMO, LMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX, XXX,
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, XXX,
		// Mandaic
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, XXX, XXX, PUN, XXX,
		// Syriac Supplement
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX,
		// Unallocated Range
		x16(XXX), x16(XXX), x16(XXX), 
		// Arabic Extended-A
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, FMT, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		// Devanagari
		NMO, NMO, NMO, SMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, SMO, NMO, LTR, SMO, SMO,
		SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, SMO, SMO, SMO, SMO, NMO, SMO, SMO,
		LTR, NMO, NMO, NMO, NMO, NMO, NMO, NMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, NMO, NMO, PUN, PUN, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, 
		PUN, LMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		// Bengali
		LTR, NMO, NMO, NMO, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, LTR,
		LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, XXX, LTR, XXX, XXX, XXX, LTR, LTR, LTR, LTR, XXX, XXX, NMO, LTR, SMO, SMO,
		SMO, NMO, NMO, NMO, NMO, XXX, XXX, SMO, SMO, XXX, XXX, SMO, SMO, NMO, LTR, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, SMO, XXX, XXX, XXX, XXX, LTR, LTR, XXX, LTR,
		LTR, LTR, NMO, NMO, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		LTR, LTR, SYM, SYM, NUM, NUM, NUM, NUM, NUM, NUM, SYM, SYM, LTR, PUN, NMO, XXX,
		// Gurmukhi
		XXX, NMO, NMO, SMO, XXX, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, LTR,
		LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, XXX, LTR, LTR, XXX, LTR, LTR, XXX, LTR, LTR, XXX, XXX, NMO, XXX, SMO, SMO,
		SMO, NMO, NMO, XXX, XXX, XXX, XXX, NMO, NMO, XXX, XXX, NMO, NMO, NMO, XXX, XXX,
		XXX, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, LTR, LTR, LTR, LTR, XXX, LTR, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		NMO, NMO, LTR, LTR, LTR, NMO, PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Gujarati
		XXX, NMO, NMO, SMO, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR,
		LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, XXX, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, XXX, XXX, NMO, LTR, SMO, SMO,
		SMO, NMO, NMO, NMO, NMO, NMO, XXX, NMO, NMO, SMO, NMO, SMO, SMO, NMO, XXX, XXX,
		LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		LTR, LTR, NMO, NMO, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		PUN, SYM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, LTR, NMO, NMO, NMO, NMO, NMO, NMO,
		// Oriya
		XXX, NMO, SMO, SMO, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, LTR,
		LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, XXX, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, XXX, XXX, NMO, LTR, SMO, NMO,
		SMO, NMO, NMO, NMO, NMO, XXX, XXX, SMO, SMO, XXX, XXX, SMO, SMO, NMO, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, NMO, SMO, XXX, XXX, XXX, XXX, LTR, LTR, XXX, LTR,
		LTR, LTR, NMO, NMO, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		SYM, LTR, NUM, NUM, NUM, NUM, NUM, NUM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Tamil
		XXX, XXX, NMO, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, LTR, LTR,
		LTR, XXX, LTR, LTR, LTR, LTR, XXX, XXX, XXX, LTR, LTR, XXX, LTR, XXX, LTR, LTR, 
		XXX, XXX, XXX, LTR, LTR, XXX, XXX, XXX, LTR, LTR, LTR, XXX, XXX, XXX, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, SMO, SMO,
		SMO, SMO, SMO, XXX, XXX, XXX, SMO, SMO, SMO, XXX, SMO, SMO, SMO, NMO, XXX, XXX,
		LTR, XXX, XXX, XXX, XXX, XXX, XXX, SMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, 
		XXX, XXX, XXX, XXX, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		NUM, NUM, NUM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX,
		// Telugu
		NMO, SMO, SMO, SMO, NMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR,
		LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, LTR, SMO, SMO,
		NMO, SMO, SMO, SMO, SMO, XXX, NMO, NMO, NMO, XXX, SMO, SMO, SMO, SMO, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, SMO, NMO, XXX, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX,
		LTR, LTR, NMO, NMO, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, PUN, NUM, NUM, NUM, NUM, NUM, NUM, NUM, SYM,
		// Kannada
		SMO, NMO, SMO, SMO, PUN, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, 
		LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, XXX, XXX, NMO, LTR, SMO, SMO,
		SMO, SMO, SMO, SMO, SMO, XXX, SMO, SMO, SMO, XXX, SMO, SMO, SMO, SMO, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, SMO, SMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, LTR, XXX,
		LTR, LTR, NMO, NMO, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		XXX, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Malayalam
		NMO, NMO, SMO, SMO, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR,
		LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, LTR, SMO, SMO,
		SMO, SMO, SMO, SMO, SMO, XXX, SMO, SMO, SMO, XXX, SMO, SMO, SMO, NMO, NMO, SYM,
		XXX, XXX, XXX, XXX, LTR, LTR, LTR, SMO, NUM, NUM, NUM, NUM, NUM, NUM, NUM, LTR,
		LTR, LTR, NMO, NMO, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, SYM, LTR, LTR, LTR, LTR, LTR, LTR,
		// Sinhala
		XXX, XXX, SMO, SMO, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, NMO, XXX, XXX, XXX, XXX, SMO,
		SMO, SMO, NMO, NMO, NMO, XXX, NMO, XXX, SMO, SMO, SMO, SMO, SMO, SMO, SMO, SMO,
		XXX, XXX, XXX, XXX, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		XXX, XXX, SMO, SMO, PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Thai
		XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, NMO, LTR, LTR, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX, XXX, XXX, XXX, SYM,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, PUN,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, PUN, PUN, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Lao
		XXX, LTR, LTR, XXX, LTR, XXX, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, XXX, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, NMO, LTR, LTR, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, LTR, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, XXX, LTR, XXX, NMO, NMO, NMO, NMO, NMO, NMO, XXX, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, LTR, LTR, LTR, LTR,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Tibetan
		LTR, SYM, SYM, SYM, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN,
		PUN, PUN, PUN, SYM, PUN, SYM, SYM, SYM, NMO, NMO, SYM, SYM, SYM, SYM, SYM, SYM,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, NUM, NUM, NUM, NUM, NUM, NUM,		
		NUM, NUM, NUM, NUM, SYM, NMO, SYM, NMO, SYM, NMO, PUN, PUN, PUN, PUN, SMO, SMO,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX,
		XXX, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, SMO,
		NMO, NMO, NMO, NMO, NMO, PUN, NMO, NMO, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, 
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, NMO, SYM, SYM, SYM, SYM, SYM, SYM, XXX, SYM, SYM,
		PUN, PUN, PUN, PUN, PUN, SYM, SYM, SYM, SYM, PUN, PUN, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Myanmar
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, SMO, NMO, NMO, NMO,
		NMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, SMO, NMO, NMO, NMO, SMO, NMO, NMO, LTR,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, PUN, PUN, PUN, PUN, PUN, PUN,
		LTR, LTR, LTR, LTR, LTR, LTR, SMO, SMO, NMO, NMO, LTR, LTR, LTR, LTR, NMO, NMO,
		NMO, LTR, SMO, SMO, SMO, LTR, LTR, SMO, SMO, SMO, SMO, SMO, SMO, SMO, LTR, LTR,
		LTR, NMO, NMO, NMO, NMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, NMO, SMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, LTR, SMO,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, SMO, SMO, SMO, NMO, SYM, SYM,
		// Georgian
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, XXX, UPP, XXX, XXX, XXX, XXX, XXX, UPP, XXX, XXX,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, 
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, PUN, LMO, LOW, LOW, LOW,
		// Hangul Jamo
		x64(LTR), x64(LTR), x64(LTR), x64(LTR),
		// Ethiopic
		x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, XXX, LTR, LTR, LTR, LTR, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, XXX, LTR, LTR, LTR, LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		LTR, XXX, LTR, LTR, LTR, LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		x16(LTR), x16(LTR), x16(LTR),
		LTR, XXX, LTR, LTR, LTR, LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		x16(LTR), x16(LTR), x16(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, NMO, NMO, NMO,
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, XXX, XXX, XXX,
		// Ethiopic Supplement
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX,
		// Cherokee
		x64(UPP), x16(UPP),
		UPP, UPP, UPP, UPP, UPP, UPP, XXX, XXX, LOW, LOW, LOW, LOW, LOW, LOW, XXX, XXX,
		// Unified Canadian Aboriginal Syllabics
		PUN, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		x512(LTR), x64(LTR), x16(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, SYM, PUN, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		// Ogham
		HSP, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, PUN, PUN, XXX, XXX, XXX,
		// Runic
		x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, PUN, PUN, PUN, LTN, LTN,
		LTN, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Tagalog
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR,
		LTR, LTR, NMO, NMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Hanunoo
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, NMO, NMO, NMO, PUN, PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Buhid
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, NMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Tagbanwa
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR,
		LTR, XXX, NMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Khmer
		x16(LTR), x16(LTR), x16(LTR), 
		LTR, LTR, LTR, LTR, NMO, NMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, SMO, SMO,
		SMO, SMO, SMO, SMO, SMO, SMO, NMO, SMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, PUN, PUN, PUN, LTR, PUN, PUN, PUN, SYM, LTR, NMO, XXX, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, XXX, XXX, XXX,
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, XXX, XXX, XXX, XXX, XXX, XXX,
		// Mongolian
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, NMO, NMO, NMO, NMO, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, XXX, XXX, XXX,
		x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, NMO, NMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, LTR, XXX, XXX, XXX, XXX, XXX,		
		// Unified Canadian Aboriginal Syllabics Extended
		x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Limbu
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		NMO, NMO, NMO, SMO, SMO, SMO, SMO, NMO, NMO, SMO, NMO, SMO, XXX, XXX, XXX, XXX,
		SMO, SMO, NMO, NMO, SMO, SMO, SMO, NMO, SMO, NMO, NMO, NMO, XXX, XXX, XXX, XXX, 
		SYM, XXX, XXX, XXX, PUN, PUN, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG,
		// Tai Le
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// New Tai Lue
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, NUM, SYM, SYM, XXX, XXX, XXX,
		// Khmer Symbols
		x16(SYM), x16(SYM),
		// Buginese
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, SMO, SMO, NMO, XXX, XXX, PUN, PUN,
		// Tai Tham
		x16(SYM), x16(SYM), x16(SYM),
		LTR, LTR, LTR, LTR, LTR, SMO, NMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX,
		NMO, SMO, NMO, SMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, SMO, SMO, SMO,
		SMO, SMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX, XXX, NMO,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, XXX, XXX, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, XXX, XXX, XXX,
		SYM, SYM, SYM, PUN, PUN, PUN, PUN, LTR, PUN, PUN, PUN, PUN, PUN, PUN, XXX, XXX,
		// Combining Diacritical Marks Extended
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX,
		x64(XXX),
		// Balinese
		NMO, NMO, NMO, NMO, SMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, NMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, SMO, SMO,
		SMO, SMO, NMO, SMO, SMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, PUN, PUN, PUN, PUN, PUN, PUN,
		PUN, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX,
		// Sundanese
		NMO, NMO, SMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, NMO, NMO, NMO, NMO, NMO, SMO, SMO, NMO, NMO, SMO, NMO, NMO, NMO, LTR, LTR,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, LTR, LTR, LTR, LTR, LTR, LTR,
		// Batak
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, NMO, SMO, NMO, SMO, SMO, SMO, SMO, NMO, NMO, NMO,
		NMO, NMO, SMO, SMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, PUN, PUN, PUN, PUN,
		// Lepcha
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, SMO, SMO, SMO, SMO, SMO, SMO, SMO, SMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, SMO, SMO, NMO, NMO, XXX, XXX, XXX, PUN, PUN, PUN, PUN, PUN,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, LTR, LTR, LTR,
		// Ol Chiki
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LMO, LMO, LMO, LMO, LMO, LTR, PUN, PUN,
		// Cyrillic Extended-C
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Georgian Extended
		x16(UPP), x16(UPP),
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, XXX, XXX, UPP, UPP, UPP,
		// Sundanese Supplement
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Vedic Extensions
		NMO, NMO, NMO, PUN, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, LTR, LTR, LTR, LTR, NMO, LTR, LTR,
		LTR, LTR, LTR, LTR, NMO, LTR, LTR, SMO, NMO, NMO, LTR, XXX, XXX, XXX, XXX, XXX,
		// Phonetic Extensions
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LMO, LMO, LMO, LMO,
		x16(LMO), x16(LMO), x16(LMO),
		LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LMO, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		// Phonetic Extensions Supplement
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LMO, LMO, LMO, LMO, LMO,
		LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO,
		LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO, LMO,
		// Combining Diacritical Marks Supplement
		x16(NMO), x16(NMO), x16(NMO),
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, XXX, NMO, NMO, NMO, NMO, NMO,
		// Latin Extended Additional
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		// Greek Extended
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, XXX, XXX, UPP, UPP, UPP, UPP, UPP, UPP, XXX, XXX,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, XXX, XXX, UPP, UPP, UPP, UPP, UPP, UPP, XXX, XXX,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, XXX, UPP, XXX, UPP, XXX, UPP, XXX, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, XXX, XXX,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		LOW, LOW, LOW, LOW, LOW, XXX, LOW, LOW, UPP, UPP, UPP, UPP, UPP, SYM, SYM, SYM,
		SYM, SYM, LOW, LOW, LOW, XXX, LOW, LOW, UPP, UPP, UPP, UPP, UPP, SYM, SYM, SYM,
		LOW, LOW, LOW, LOW, XXX, XXX, LOW, LOW, UPP, UPP, UPP, UPP, XXX, SYM, SYM, SYM,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		XXX, XXX, LOW, LOW, LOW, XXX, LOW, LOW, UPP, UPP, UPP, UPP, UPP, SYM, SYM, XXX,
		// General Punctuation
		HSP, HSP, HSP, HSP, HSP, HSP, HSP, HSP, HSP, HSP, HSP, FMT, FMT, FMT, FMT, FMT,
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN,
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, NWL, NWL, FMT, FMT, FMT, FMT, FMT, HSP,
		MAT, MAT, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, SYM, PUN,
		PUN, SYM, PUN, PUN, MAT, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN,
		PUN, PUN, MAT, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, HSP,
		FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT, FMT,
		// Superscript and Subscript
		DIG, SYW, XXX, XXX, DIG, DIG, DIG, DIG, DIG, DIG, MAT, MAT, MAT, PUN, PUN, SYW,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, MAT, MAT, MAT, PUN, PUN, XXX,
		SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, XXX, XXX, XXX, XXX,
		// Currency Symbols
		x16(SYM), x16(SYM), x16(XXX),
		// Combining Diacritical Marks for Symbols
		x16(NMO), x16(NMO),
		NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Letterlike Symbols
		SYL, SYL, SYU, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYW, SYU, SYW, SYU, SYW, SYW,
		SYW, SYU, SYU, SYW, SYL, SYU, SYL, SYL, SYW, SYU, SYU, SYU, SYU, SYU, SYL, SYU,
		SYL, SYL, SYL, SYU, SYU, SYL, SYU, SYU, SYL, SYW, SYU, SYU, SYU, SYU, SYW, SYW,
		SYU, SYU, SYU, SYU, SYW, SYL, SYL, SYL, SYL, SYW, SYU, SYL, SYW, SYW, SYU, SYU,
		SYU, SYU, SYU, SYU, SYU, SYU, SYW, SYW, SYW, SYW, SYL, SYM, SYL, SYL, SYL, SYM,
		// Number Forms
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN, UPN,
		LON, LON, LON, LON, LON, LON, LON, LON, LON, LON, LON, LON, LON, LON, LON, LON,
		LTN, LTN, LTN, UPN, LON, LTN, LTN, LTN, LTN, NUM, DIG, DIG, XXX, XXX, XXX, XXX,
		// Arrows
		MAT, MAT, MAT, MAT, MAT, SYM, SYM, SYM, SYM, SYM, MAT, MAT, SYM, SYM, SYM, SYM,
		MAT, SYM, SYM, MAT, SYM, SYM, MAT, SYM, SYM, SYM, SYM, SYM, SYM, SYM, MAT, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, MAT, MAT,
		SYM, SYM, MAT, SYM, MAT, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT,
		// Mathematical Operators
		x64(MAT), x64(MAT), x64(MAT), x64(MAT),
		// Miscellaneous Technical
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, MAT, MAT, MAT, MAT, SYM, SYM, SYM, SYM, 
		MAT, SYM, MAT, MAT, MAT, SYM, SYM, SYM, SYM, MAT, SYM, SYM, SYM, SYM, SYM, SYM,
		MAT, MAT, SYM, SYM, SYM, SYM, SYM, SYM, SYM, PUN, PUN, SYM, SYM, SYM, SYM, SYM,	
		x64(SYM),
		SYM, SYM, SYM, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYM, MAT, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, MAT, MAT, MAT, MAT, MAT,
		MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT,
		MAT, MAT, MAT, MAT, SYM, SYM, SYM, MAT, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, MAT, MAT, MAT, MAT,
		MAT, MAT, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		// Control Pictures
		x16(SYM), x16(SYM),
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Optical Character Recognition
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Enclosed Alphanumerics
		x16(NUM), x16(NUM), x16(NUM),
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, SYW, SYW, SYW, SYW,
		SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW,
		SYW, SYW, SYW, SYW, SYW, SYW, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU,
		SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU, SYU,
		SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW,
		SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, NUM, NUM, NUM, NUM, NUM, NUM,
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		// Box Drawing
		x64(SYM), x64(SYM),
		// Block Elements
		x16(SYM), x16(SYM), 
		// Geometric Shapes
		x64(SYM), x16(SYM), x16(SYM),
		// Miscellaneous Symbols
		x64(SYM), x16(SYM), x16(SYM),
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, MAT,
		x16(SYM), x64(SYM), x64(SYM),
		// Dingbats
		x64(SYM), x16(SYM),
		SYM, SYM, SYM, PUN, PUN, PUN, SYM, PUN, SYM, SYM, SYM, PUN, PUN, PUN, PUN, PUN,
		PUN, PUN, PUN, PUN, SYM, SYM, SYM, SYM, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN,
		PUN, PUN, PUN, PUN, PUN, PUN, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		NUM, NUM, NUM, NUM, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		// Miscellaneous Mathematical Symbols-A
		MAT, MAT, MAT, MAT, MAT, PUN, PUN, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT,
		MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT,
		MAT, MAT, MAT, MAT, MAT, MAT, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN,
		// Supplemental Arrows-A
		MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT,
		// Braille Patterns
		HSP, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		x16(SYM), x16(SYM), x16(SYM), x64(SYM), x64(SYM), x64(SYM),
		// Supplemental Arrows-B
		x64(MAT), x64(MAT),
		// Miscellaneous Mathematical Symbols-B
		x64(MAT), x64(MAT),
		// Supplemental Mathematical Operators
		x64(MAT), x64(MAT), x64(MAT), x64(MAT),
		// Miscellaneous Symbols and Arrows
		x16(SYM), x16(SYM), x16(SYM),
		MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT, MAT,
		MAT, MAT, MAT, MAT, MAT, SYM, SYM, MAT, MAT, MAT, MAT, MAT, MAT, SYM, SYM, SYM,
		x16(SYM), x16(SYM),
		SYM, SYM, SYM, SYM, XXX, XXX, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		x64(SYM), x16(SYM), x16(SYM),
		// Glagolitic
		x16(UPP), x16(UPP),
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, XXX,
		x16(LOW), x16(LOW),
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, XXX,
		// Latin Extended-C
		UPP, LOW, UPP, UPP, UPP, LOW, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, UPP, UPP,
		UPP, LOW, UPP, LOW, LOW, UPP, LOW, LOW, LOW, LOW, LOW, LOW, LMO, LMO, UPP, UPP,
		// Coptic
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, LOW, SYM, SYM, SYM, SYM, SYM, SYM, UPP, LOW, UPP, LOW, NMO,
		NMO, NMO, UPP, LOW, XXX, XXX, XXX, XXX, XXX, PUN, PUN, PUN, PUN, NUM, PUN, PUN,
		// Georgian Supplement
		x16(LOW), x16(LOW),
		LOW, LOW, LOW, LOW, LOW, LOW, XXX, LOW, XXX, XXX, XXX, XXX, XXX, LOW, XXX, XXX,
		// Tifinagh
		x16(LTR), x16(LTR), x16(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, LMO,
		PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, NMO,
		// Ethiopic Extended
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		// Cyrillic Extended-A
		x16(NMO), x16(NMO),
		// Supplemental Punctuation
		x16(PUN), x16(PUN),
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, LMO,
		x16(PUN), x16(PUN), x16(XXX), x16(XXX), x16(XXX),
		// CJK Radicals Supplement
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, SYM, SYM, SYM, SYM, SYM,
		x64(SYM), x16(SYM),
		SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Kangxi Radicals
		x64(SYM), x64(SYM), x64(SYM), x16(SYM),
		SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Unallocated Range
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Ideographic Description Characters
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX,
		// CJK Symbols and Punctuation
		HSP, PUN, PUN, PUN, SYM, LTR, LTR, LTN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN,
		PUN, PUN, SYM, SYM, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN,
		SYM, LTN, LTN, LTN, LTN, LTN, LTN, LTN, LTN, LTN, NMO, NMO, NMO, NMO, SMO, SMO,
		PUN, LMO, LMO, LMO, LMO, LMO, SYM, SYM, LTN, LTN, LTN, LTR, LTR, PUN, SYM, SYM,
		// Hiragana
		XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, NMO, NMO, SMO, SMO, LTR, LTR, LTR,
		// Katakana
		PUN, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, PUN, LTR, LTR, LTR, LTR,
		// Bopomofo
		XXX, XXX, XXX, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		// Hangul Compatibility Jamo
		XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		// Kanbun
		SYL, SYL, LTN, LTN, LTN, LTN, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL,
		// Bopomofo Extended
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX,
		// CJK Strokes
		x16(SYM), x16(SYM),
		SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Katakana Phonetic Extensions
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		// Enclosed CJK Letters and Months
		SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL,
		SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, XXX,
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, SYL, SYL, SYL, SYL, SYL, SYL,
		SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL,
		SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		SYL, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		x64(SYL), x16(SYL),
		SYL, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM, NUM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYL, SYW, SYL, SYU,
		x16(SYL), x16(SYL), x16(SYL),
		// CJK Compatibility
		x64(SYL), x16(SYL),
		SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYL, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYL, SYW, SYU, LOW, SYL, SYW, SYW, SYW, SYW, SYU, SYL, SYL, SYL, SYL, SYL,
		SYL, SYL, SYL, SYL, SYL, SYU, SYU, SYU, SYW, SYW, SYL, SYL, SYL, SYW, SYW, SYW,
		SYL, SYL, SYL, SYL, SYL, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW,
		SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYW, SYL, SYL, SYL, SYL, SYW, SYM, SYM,
		SYW, SYW, SYW, SYW, SYL, SYL, SYL, SYL, SYL, SYU, SYL, SYL, SYL, SYL, SYL, SYU,
		SYL, SYL, SYW, SYL, SYW, SYW, SYL, SYL, SYL, SYL, SYW, SYU, SYW, SYU, SYU, SYL,
		MAT, MAT, MAT, MAT, SYW, SYW, SYW, SYL, SYW, SYU, SYU, SYW, SYL, SYL, SYL, SYL,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYW,
		// CJK Unified Ideographs Extension A
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR),
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x64(LTR),  x64(LTR),
		x64(LTR),  x64(LTR),  x64(LTR),  x64(LTR),  x16(LTR),  x16(LTR),  x16(LTR), 
		LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Yijing Hexagram Symbols
		x64(SYM),
		// CJK Unified Ideographs
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR),
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), 
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), 
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), 
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), 
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x64(LTR),  x64(LTR),
		x64(LTR),  x64(LTR),  x64(LTR),  x64(LTR),  x64(LTR),  x16(LTR),  x16(LTR),
		x16(LTR),
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Yi Syllables
		x512(LTR), x512(LTR), x64(LTR), x64(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX,
		// Yi Radicals
		x16(SYM), x16(SYM), x16(SYM),
		SYM, SYM, SYM, SYM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Lisu
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LMO, LMO, LMO, LMO, LMO, LMO, PUN, PUN,
		// Vai
		x64(LTR), x64(LTR), x64(LTR), x64(LTR), 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, PUN, PUN, PUN,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, LTR, LTR, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Cyrillic Extended-B
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, LTR, NMO,
		NMO, NMO, NMO, PUN, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, PUN, LMO,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, LMO, LMO, NMO, NMO,
		// Bamum
		x64(LTR), x16(LTR),
		NMO, NMO, PUN, PUN, PUN, PUN, PUN, PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Modifier Tone Letters
		x16(LMO), x16(LMO), 
		// Latin Extended-D
		LMO, LMO, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		LOW, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		LMO, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, UPP, LOW, UPP, LOW, UPP, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, LMO, LMO, LMO, UPP, LOW, UPP, LOW, LTR,
		UPP, LOW, UPP, LOW, LOW, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, UPP, UPP, UPP, UPP, LOW,
		UPP, UPP, UPP, UPP, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW, UPP, LOW,
		XXX, XXX, UPP, LOW, UPP, UPP, UPP, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, UPP, LMO, LMO, LOW, UPP, UPP, UPP, UPP, UPP,
		// Syloti Nagri
		LTR, LTR, NMO, LTR, LTR, LTR, NMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, SMO, SMO, NMO, NMO, SMO, PUN, PUN, PUN, PUN, XXX, XXX, XXX, XXX,
		// Common Indic Number Forms
		NUM, NUM, NUM, NUM, NUM, NUM, NUM, SYM, SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX,
		// Phags-pa
		x16(LTR), x16(LTR), x16(LTR),
		LTR, LTR, LTR, LTR, PUN, PUN, PUN, PUN, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Saurashtra
		SMO, SMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, SMO, SMO, SMO, SMO, SMO, SMO, SMO, SMO, SMO, SMO, SMO, SMO,
		SMO, SMO, SMO, SMO, NMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, PUN, PUN,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, XXX, XXX, XXX,
		// Devanagari Extended
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, LTR, LTR, LTR, LTR, LTR, LTR, PUN, PUN, PUN, LTR, PUN, LTR, LTR, NMO,
		// Kayah Li
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, PUN, PUN,
		// Rejang
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, SMO, SMO, SMO, NMO, NMO, NMO, NMO, NMO, NMO,
		NMO, NMO, NMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, PUN,
		// Hangul Jamo Extended-A
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX,
		// Javanese
		NMO, NMO, NMO, SMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, NMO, SMO, SMO, NMO, NMO, SMO, SMO, SMO, SMO, NMO, SMO, SMO, SMO,
		SMO, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, XXX, LMO,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, XXX, PUN, PUN,
		// Myanmar Extended-B
		LTR, LTR, LTR, LTR, LTR, LTR, LMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, LTR, LTR, LTR, LTR, LTR, XXX,
		// Cham
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, NMO, NMO, NMO, NMO, SMO, SMO,
		SMO, NMO, NMO, SMO, SMO, NMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		LTR, LTR, LTR, NMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, NMO, SMO, XXX, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, PUN, PUN, PUN, PUN,
		// Myanmar Extended-A
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LMO, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, SMO, NMO, SMO, LTR, LTR,
		// Tai Viet
		x16(LTR), x16(LTR), x16(LTR),
		NMO, NMO, NMO, NMO, NMO, LTR, LTR, NMO, NMO, LTR, LTR, LTR, LTR, LTR, NMO, NMO,
		LTR, NMO, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, LTR, LTR, LTR, PUN, PUN,
		// Meetei Mayek Extensions
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, SMO, NMO, NMO, SMO, SMO,
		PUN, PUN, SYM, LTR, LTR, SMO, NMO, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Ethiopic Extended-A
		XXX, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		XXX, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
	    LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		// Latin Extended-E
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, SYM, LMO, LMO, LMO, LMO,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Cherokee Supplement
		x64(LOW), x16(LOW),
		// Meetei Mayek
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, SMO, SMO, NMO, SMO, SMO, NMO, SMO, SMO, PUN, SMO, NMO, XXX, XXX,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, XXX, XXX, XXX, XXX, XXX, XXX,
		// Hangul Syllables
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), 
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), 
		x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR), x512(LTR),
		x64(LTR),  x64(LTR),  x64(LTR),  x64(LTR),  x64(LTR),  x64(LTR),  x16(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, 
		LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		// Hangul Jamo Extended-B
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX,
		// Surrogates
		x512(SUR), x512(SUR), x512(SUR), x512(SUR),
		// Private Use Area
		x512(PRI), x512(PRI), x512(PRI), x512(PRI), x512(PRI), x512(PRI), x512(PRI),
		x512(PRI), x512(PRI), x512(PRI), x512(PRI), x512(PRI), x64(PRI),  x64(PRI),
		x64(PRI),  x64(PRI),
		// CJK Compatibility Ideographs
		x64(LTR), x64(LTR), x64(LTR), x64(LTR), x64(LTR), x16(LTR), x16(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX,
		x64(LTR), x16(LTR), x16(LTR), 
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX,
		x16(XXX), x16(XXX),
		// Alphabetic Presentation Forms
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
		XXX, XXX, XXX, LOW, LOW, LOW, LOW, LOW, XXX, XXX, XXX, XXX, XXX, LTR, NMO, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, XXX, LTR, XXX,
		LTR, LTR, XXX, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		// Arabic Presentation Forms-A
		x64(LTR), x16(LTR), x16(LTR),
		LTR, LTR, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM, SYM,
		SYM, SYM, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
	    XXX, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
	    x64(LTR), x64(LTR), x64(LTR), x64(LTR), x64(LTR), x16(LTR),
	    LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, PUN, PUN,
	    x16(XXX), x64(LTR), 
	    XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
	    LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
	    LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
	    LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX,
	    x16(NON), x16(NON),
	    LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX,
		// Variation Selectors
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		// Vertical Forms
		PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, XXX, XXX, XXX, XXX, XXX, XXX,
		// Combining Half Marks
		NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO, NMO,
		// CJK Compatibility Forms
		x16(PUN), x16(PUN),
		// Small Form Variants
		PUN, PUN, PUN, XXX, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, PUN, SYM,
		SYM, PUN, MAT, PUN, MAT, MAT, MAT, XXX, SYM, SYM, MAT, SYM, XXX, XXX, XXX, XXX,
		// Arabic Presentation Forms-B
		LTR, LTR, LTR, LTR, LTR, XXX, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		x64(LTR), x16(LTR), x16(LTR), x16(LTR),
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, BOM,
		// Halfwidth and Fullwidth Forms
		XXX, PUN, PUN, SYM, SYM, MAT, SYM, PUN, PUN, PUN, PUN, MAT, PUN, PUN, PUN, PUN,
		DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, DIG, PUN, PUN, MAT, MAT, MAT, PUN,
		SYM, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP,
		UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, UPP, PUN, SYM, PUN, SYM, SYM,
		SYM, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW,
		LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, LOW, PUN, MAT, PUN, MAT, PUN,
		PUN, PUN, PUN, PUN, PUN, PUN, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, SMO, SMO,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR,
		LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, LTR, XXX,
		XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR,
		XXX, XXX, LTR, LTR, LTR, LTR, LTR, LTR, XXX, XXX, LTR, LTR, LTR, XXX, XXX, XXX,
		SYM, SYM, MAT, SYM, SYM, SYM, SYM, XXX, SYM, MAT, MAT, MAT, MAT, SYM, SYM, XXX,
		// Specials
		XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, XXX, FMT, FMT, FMT, SYM, SYM, NON, NON
		
		#undef x16
		#undef x64
		#undef x512
	};
	
    const uint16_t unicodeUppercase_0To1415[1416] =
    {
		// Basic Latin (ASCII)
        0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 65, 66, 67,
        68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
        88, 89, 90, 123, 124, 125, 126, 127, 
        // Latin-1 Supplement
        128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 
        144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
        160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
        176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
        192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 7838,
        192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 247, 216, 217, 218, 219, 220, 221, 222, 376,
        // Latin Extended-A
        256, 256, 258, 258, 260, 260, 262, 262, 264, 264, 266, 266, 268, 268, 270, 270,
        272, 272, 274, 274, 276, 276, 278, 278, 280, 280, 282, 282, 284, 284, 286, 286,
        288, 288, 290, 290, 292, 292, 294, 294, 296, 296, 298, 298, 300, 300, 302, 302,
        304, 304, 306, 306, 308, 308, 310, 310, 75,  313, 313, 315, 315, 317, 317, 319,
        319, 321, 321, 323, 323, 325, 325, 327, 327, 78,  330, 330, 332, 332, 334, 334,
        336, 336, 338, 338, 340, 340, 342, 342, 344, 344, 346, 346, 348, 348, 350, 350,
        352, 352, 354, 354, 356, 356, 358, 358, 360, 360, 362, 362, 364, 364, 366, 366,
        368, 368, 370, 370, 372, 372, 374, 374, 376, 377, 377, 379, 379, 381, 381, 53,
        // Latin Extended-B
        579, 385, 386, 386, 388, 388, 390, 391, 391, 393, 394, 395, 395, 397, 398, 399,
        400, 401, 401, 403, 404, 502, 406, 407, 408, 408, 573, 411, 412, 413, 544, 415,
        416, 416, 418, 418, 420, 420, 422, 423, 423, 425, 426, 427, 428, 428, 430, 431,
        431, 433, 434, 435, 435, 437, 437, 439, 440, 440, 442, 443, 444, 444, 446, 503,
        448, 449, 450, 451, 452, 452, 452, 455, 455, 455, 458, 458, 458, 461, 461, 463,
        463, 465, 465, 467, 467, 469, 469, 471, 471, 473, 473, 475, 475, 398, 478, 478,
        480, 480, 482, 482, 484, 484, 486, 486, 488, 488, 490, 490, 492, 492, 494, 494,
        74,  497, 497, 497, 500, 500, 502, 503, 504, 504, 506, 506, 508, 508, 510, 510,
        512, 512, 514, 514, 516, 516, 518, 518, 520, 520, 522, 522, 524, 524, 526, 526,
        528, 73,  530, 530, 532, 532, 534, 534, 536, 536, 538, 538, 540, 540, 542, 542,
        544, 545, 546, 546, 548, 548, 550, 550, 552, 552, 554, 554, 556, 556, 558, 558,
        560, 560, 562, 562, 564, 565, 566, 567, 568, 569, 570, 571, 571, 573, 574, 11390,
        11391, 577, 577, 579, 580, 581, 582, 582, 584, 584, 586, 586, 588, 588, 590, 590,
		// IPA Extensions
        11375, 11373, 11376, 385, 390, 597, 393, 394, 600, 399, 602, 400, 42923, 605, 606, 607,
		403, 42924, 610, 404, 612, 42893, 42922, 615, 407, 406, 42926, 11362, 42925, 621, 622, 412,
		624, 11374, 413, 627, 628, 415, 630, 631, 632, 633, 634, 635, 636, 11364, 638, 639,
		422, 641, 642, 425, 644, 645, 646, 42929, 430, 580, 433, 434, 581, 653, 654, 655,
		656, 657, 439, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 42930, 42928, 671,
		672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
		// Spacing Modifier Letters
		688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
		704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
		720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
		736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
		752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
		// Combining Diacritical Marks
		768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
		784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
		800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
		816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
		832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
		848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
		864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
		// Greek and Coptic
		880, 880, 882, 882, 884, 885, 886, 886, 888, 889, 890, 1021, 1022, 1023, 894, 895,
		896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
		921, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
		928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 902, 904, 905, 906,
		933, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
		928, 929, 931, 931, 932, 933, 934, 935, 936, 937, 938, 939, 908, 910, 911, 975,
		923, 920, 978, 979, 980, 934, 928, 975, 984, 984, 986, 986, 988, 988, 990, 990,
		992, 992, 994, 994, 996, 996, 998, 998, 1000, 1000, 1002, 1002, 1004, 1004, 1006, 1006,
		922, 929, 1017, 895, 1012, 917, 1014, 1015, 1015, 1017, 1018, 1018, 1020, 1021, 1022, 1023,
		// Cyrillic
		1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
		1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
		1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
		1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
		1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
		1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
		1120, 1120, 1122, 1122, 1124, 1124, 1126, 1126, 1128, 1128, 1130, 1130, 1132, 1132, 1134, 1134,
		1136, 1136, 1138, 1138, 1140, 1140, 1142, 1142, 1144, 1144, 1146, 1146, 1148, 1148, 1150, 1150,
		1152, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1162, 1164, 1164, 1166, 1166,
		1168, 1168, 1170, 1170, 1172, 1172, 1174, 1174, 1176, 1176, 1178, 1178, 1180, 1180, 1182, 1182,
		1184, 1184, 1186, 1186, 1188, 1188, 1190, 1190, 1192, 1192, 1194, 1194, 1196, 1196, 1198, 1198,
		1200, 1200, 1202, 1202, 1204, 1204, 1206, 1206, 1208, 1208, 1210, 1210, 1212, 1212, 1214, 1214,
		1216, 1217, 1217, 1219, 1219, 1221, 1221, 1223, 1223, 1225, 1225, 1227, 1227, 1229, 1229, 1216,
		1232, 1232, 1234, 1234, 1236, 1236, 1238, 1238, 1240, 1240, 1242, 1242, 1244, 1244, 1246, 1246,
		1248, 1248, 1250, 1250, 1252, 1252, 1254, 1254, 1256, 1256, 1258, 1258, 1260, 1260, 1262, 1262,
		1264, 1264, 1266, 1266, 1268, 1268, 1270, 1270, 1272, 1272, 1274, 1274, 1276, 1276, 1278, 1278,
		// Cyrillic Supplement
		1280, 1280, 1282, 1282, 1284, 1284, 1286, 1286, 1288, 1288, 1290, 1290, 1292, 1292, 1294, 1294,
		1296, 1296, 1298, 1298, 1300, 1300, 1302, 1302, 1304, 1304, 1306, 1306, 1308, 1308, 1310, 1310,
		1312, 1312, 1314, 1314, 1316, 1316, 1318, 1318, 1320, 1320, 1322, 1322, 1324, 1324, 1326, 1326,
		// Armenian
		1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
		1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
		1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
		1376, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
		1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
		1360, 1361, 1362, 1363, 1364, 1365, 1366, 1415
    };
    
    const uint16_t unicodeLowercase_0To1415[1416] =
    {
		// Basic Latin (ASCII)
        0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,
        16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
        32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
        48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
        64,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91,  92,  93,  94,  95,
        96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 
        // Latin-1 Supplement
        128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 
        144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
        160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
        176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
        224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
        240, 241, 242, 243, 244, 245, 246, 215, 248, 249, 250, 251, 252, 253, 254, 223,
        224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
        240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        // Latin Extended-A
        257, 257, 259, 259, 261, 261, 263, 263, 265, 265, 267, 267, 269, 269, 271, 271,
        273, 273, 275, 275, 277, 277, 279, 279, 281, 281, 283, 283, 285, 285, 287, 287,
        289, 289, 291, 291, 293, 293, 295, 295, 297, 297, 299, 299, 301, 301, 303, 303,
        305, 305, 307, 307, 309, 309, 311, 311, 312, 314, 314, 316, 316, 318, 318, 320,
        320, 322, 322, 324, 324, 326, 326, 328, 328, 329, 331, 331, 333, 333, 335, 335,
        337, 337, 339, 339, 341, 341, 343, 343, 345, 345, 347, 347, 349, 349, 351, 351,
        353, 353, 355, 355, 357, 357, 359, 359, 361, 361, 363, 363, 365, 365, 367, 367,
        369, 369, 371, 371, 373, 373, 375, 375, 255, 378, 378, 380, 380, 382, 382, 383,
        // Latin Extended-B
        384, 595, 387, 387, 389, 389, 596, 392, 392, 598, 599, 396, 396, 397, 477, 601,
        603, 402, 402, 608, 611, 405, 617, 616, 409, 409, 410, 411, 623, 626, 414, 629,
        417, 417, 419, 419, 421, 421, 640, 424, 424, 643, 426, 427, 429, 429, 648, 432,
        432, 650, 651, 436, 436, 438, 438, 658, 441, 441, 442, 443, 445, 445, 446, 447,
        448, 449, 450, 451, 454, 454, 454, 457, 457, 457, 460, 460, 460, 462, 462, 464,
        464, 466, 466, 468, 468, 470, 470, 472, 472, 474, 474, 476, 476, 477, 479, 479,
        481, 481, 483, 483, 485, 485, 487, 487, 489, 489, 491, 491, 493, 493, 495, 495,
        496, 499, 499, 499, 501, 501, 405, 447, 505, 505, 507, 507, 509, 509, 511, 511,
        513, 513, 515, 515, 517, 517, 519, 519, 521, 521, 523, 523, 525, 525, 527, 527,
        105, 529, 531, 531, 533, 533, 535, 535, 537, 537, 539, 539, 541, 541, 543, 543,
        414, 545, 547, 547, 549, 549, 551, 551, 553, 553, 555, 555, 557, 557, 559, 559,
        561, 561, 563, 563, 564, 565, 566, 567, 568, 569, 11365, 572, 572, 410, 11366, 575,
        576, 578, 578, 384, 649, 652, 583, 583, 585, 585, 587, 587, 589, 589, 591, 591,
		// IPA Extensions
        592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607,
		608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
		624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
		640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
		656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
		672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
		// Spacing Modifier Letters
		688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
		704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
		720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
		736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
		752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
		// Combining Diacritical Marks
		768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
		784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
		800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
		816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
		832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
		848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
		864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
		// Greek and Coptic
		881, 881, 883, 883, 884, 885, 887, 887, 888, 889, 890, 891, 892, 893, 894, 1011,
		896, 897, 898, 899, 900, 901, 940, 903, 941, 942, 943, 907, 972, 909, 973, 974,
		912, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
		960, 961, 930, 963, 964, 965, 966, 967, 968, 969, 970, 971, 940, 941, 942, 943,
		944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
		960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 983,
		976, 977, 965, 973, 971, 981, 982, 983, 985, 985, 987, 987, 989, 989, 991, 991,
		993, 993, 995, 995, 997, 997, 999, 999, 1001, 1001, 1003, 1003, 1005, 1005, 1007, 1007,
		1008, 1009, 1010, 1011, 952, 1013, 1014, 1016, 1016, 1010, 1019, 1019, 1020, 891, 892, 893,
		// Cyrillic
		1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
		1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
		1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
		1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
		1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
		1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
		1121, 1121, 1123, 1123, 1125, 1125, 1127, 1127, 1129, 1129, 1131, 1131, 1133, 1133, 1135, 1135,
		1137, 1137, 1139, 1139, 1141, 1141, 1143, 1143, 1145, 1145, 1147, 1147, 1149, 1149, 1151, 1151,
		1153, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1163, 1165, 1165, 1167, 1167,
		1169, 1169, 1171, 1171, 1173, 1173, 1175, 1175, 1177, 1177, 1179, 1179, 1181, 1181, 1183, 1183,
		1185, 1185, 1187, 1187, 1189, 1189, 1191, 1191, 1193, 1193, 1195, 1195, 1197, 1197, 1199, 1199,
		1201, 1201, 1203, 1203, 1205, 1205, 1207, 1207, 1209, 1209, 1211, 1211, 1213, 1213, 1215, 1215,
		1231, 1218, 1218, 1220, 1220, 1222, 1222, 1224, 1224, 1226, 1226, 1228, 1228, 1230, 1230, 1231,
		1233, 1233, 1235, 1235, 1237, 1237, 1239, 1239, 1241, 1241, 1243, 1243, 1245, 1245, 1247, 1247,
		1249, 1249, 1251, 1251, 1253, 1253, 1255, 1255, 1257, 1257, 1259, 1259, 1261, 1261, 1263, 1263,
		1265, 1265, 1267, 1267, 1269, 1269, 1271, 1271, 1273, 1273, 1275, 1275, 1277, 1277, 1279, 1279,
		// Cyrillic Supplement
		1281, 1281, 1283, 1283, 1285, 1285, 1287, 1287, 1289, 1289, 1291, 1291, 1293, 1293, 1295, 1295,
		1297, 1297, 1299, 1299, 1301, 1301, 1303, 1303, 1305, 1305, 1307, 1307, 1309, 1309, 1311, 1311,
		1313, 1313, 1315, 1315, 1317, 1317, 1319, 1319, 1321, 1321, 1323, 1323, 1325, 1325, 1327, 1327,
		// Armenian
		1328, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
		1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
		1408, 1409, 1410, 1411, 1412, 1413, 1414, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
		1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
		1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
		1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415
    };
    
    uint32_t unicodeUppercase_42560To43967( const uint32_t codepoint )
    {/*
		// Cyrillic Extended-B, Latin Extended-D
        if ((codepoint < 42606) || ((codepoint > 42623) && (codepoint < 42652)) ||
			((codepoint > 42785) && (codepoint < 42800)) ||
			)
            return (codepoint & ((uint32_t)(-2)));
		// Cherokee Supplement
        if ((codepoint > 43887) && (codepoint < 43968))
            return (codepoint - 38864);*/
        return codepoint;
    }
    
    uint32_t unicodeLowercase_42560To43967( const uint32_t codepoint )
    {
		// Cyrillic Extended-B, Latin Extended-D
        if ((codepoint < 42607) || ((codepoint > 42623) && (codepoint < 42652)) ||
			((codepoint > 42785) && (codepoint < 42800)) ||
			((codepoint > 42801) && (codepoint < 42865)) ||
			((codepoint > 42872) && (codepoint < 42888)) ||
			((codepoint > 42801) && (codepoint < 42865)))
            return (codepoint | 1);
        return codepoint;
    }
    
    uint32_t unicodeUppercase_42786To43007( const uint32_t codepoint )
    {
        if ((codepoint < 42800) || // Latin (special)
            ((codepoint > 42802) && (codepoint < 42864)) || // Latin (special)
            ((codepoint > 42902) && (codepoint < 42922)) || // Latin (special)
            ((codepoint > 42932) && (codepoint < 42948)) || // Latin (special)
            (codepoint == 42897) || (codepoint == 42899))   // Latin (special)
            return (codepoint & ((uint32_t)(-2)));
        if ((codepoint > 42872) && (codepoint < 42888)) // Latin (special)
            return (codepoint | 1);
        if (codepoint == 42892) return 42891;
        if (codepoint == 42900) return 42948;
        return codepoint;
    }
    
    uint32_t unicodeUppercase_65345To68850( const uint32_t codepoint )
    {
        if (codepoint < 65371) // Fullwidth Latin
            return (codepoint - 38);
        if (((codepoint > 66775) && (codepoint < 66812)) || // Osage
            ((codepoint > 68786) && (codepoint < 68851)))   // Old Hungarian
            return (codepoint - 40);
        return codepoint;
    }
    
    uint32_t unicodeUppercase_71872To125251( const uint32_t codepoint )
    {
        if ((codepoint < 71904) || // Warang Citi
            ((codepoint > 93791) && (codepoint < 93824)))   // Medefaidrin
            return (codepoint ^ 32);
        if ((codepoint > 125217) && (codepoint < 125252)) // Adlam
            return (codepoint - 22);
    }
}

namespace retxt
{
    namespace unicode
    {
		/*uint32_t fromISO88592( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO88593( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO88594( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO88595( const byte character ) //TODO
		{
			if (character < 160) return character;
		}*/
		
		uint32_t fromISO88596( const byte character )
		{
			if (character < 161) return character;
			if (character > 192)
			{ 
				if ((character < 219) || ((character > 223) && (character < 243)))
					return (character + 1376);
			}
			else
			{
				if ((character == 164) || (character == 173)) return character;
				if (character == 172) return 1548;
				if (character == 187) return 1563;
				if (character == 191) return 1567;
			}
			return 26;
		}
		
		uint32_t fromISO88598( const byte character )
		{
			if (character == 161) return 26;
			if (character < 170) return character;
			if (character < 191) return CP1255ToUnicodeConversionTable[character - 128];
			if (character < 223) return 26;
			if (character == 223) return 8215;
			if (character < 251) return (character + 1264);
			if ((character == 253) || (character == 254)) return (character + 7953);
			return 26;
		}
		
		uint32_t fromISO88599( const byte character )
		{
			if (character > 207)
			{
				if (character > 239)
				{
					if (character == 222) return 304;
					if (character == 223) return 350;
					if (character == 240) return 287;
				}
				else if ((character & 240) == 208)
				{
					if (character == 190) return 305;
					if (character == 191) return 351;
					if (character == 208) return 288;
				}
			}
			return character;
		}
		
		/*uint32_t fromISO885910( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO885911( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO885913( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO885914( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO885915( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromISO885916( const byte character ) //TODO
		{
			if (character < 160) return character;
		}
		
		uint32_t fromWindows1254( const byte character )
		{
			if (character > 127)
			{
				if ((character == 142) || (character == 158)) return 26;
				if (character < 160) return CP1252ToUnicodeConversionTable[character - 128];
				if (character > 239)
				{
					if (character == 222) return 304;
					if (character == 223) return 350;
					if (character == 240) return 287;
				}
				else if ((character & 240) == 208)
				{
					if (character == 190) return 305;
					if (character == 191) return 351;
					if (character == 208) return 288;
				}
			}
			return character;
		}
		
		uint32_t fromWindows1255( const byte character )
		{
			if (character < 128) return character;
			if (character < 192) return CP1255ToUnicodeConversionTable[character - 128];
			if (character < 212) return (character + 1264);
			if (character < 217) return (character + 1308);
			if (character < 224) return 26;
			if (character < 251) return (character + 1264);
			if ((character == 253) || (character == 254)) return (character + 7953);
			return 26;
		}*/
		
		characterClass classOf( const uint32_t codepoint )
		{
			return ((characterClass)(characterClassTable[characterClass_BMP[codepoint]]));
		}
		
		std::string nameOfTheClassOf( const uint32_t codepoint )
		{
			return characterClassNamesTable[characterClass_BMP[codepoint]];
		}
            
        bool isNonGraphicControlCharacter( const uint32_t codepoint )
        {
			if (codepoint > 160) return false;
			return (characterClass_BMP[codepoint] == internalCharacterClass::CTR);
		}
        
        bool isFormatCharacter( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClassTable[characterClass_BMP[codepoint]] & characterClass::Format);
			//if (codepoint < 131072) 
			//	return (characterClassTable[characterClass_SMP[codepoint - 65536]] & characterClass::Format);
			if (codepoint < 917504)
				return false;
			//if (codepoint < 983040) // TODO
			//	return (characterClassTable[characterClass_SMP[codepoint - 917504]] & characterClass::Format);
			return false;
		}
        
        bool isWhitespace( const uint32_t codepoint )
        {
			if (codepoint > 12543) return false;
			return (characterClassTable[characterClass_BMP[codepoint]] & characterClass::Whitespace);
		}
        
        bool isHorizontalWhitespace( const uint32_t codepoint )
        {
			if (codepoint > 65535) return false;
			return (characterClassTable[characterClass_BMP[codepoint]] & 0b00000000000000001000);
		}
        
        bool isLineBreak( const uint32_t codepoint )
        {
			if (codepoint > 65535) return false;
			return (characterClassTable[characterClass_BMP[codepoint]] & 0b00000000000000010000);
		}
        
		bool isDigit( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClass_BMP[codepoint] == internalCharacterClass::DIG);
			//if (codepoint < 131072)
			//	return (characterClass_SMP[codepoint - 65536] == internalCharacterClass::DIG);
			return false;
		}
		
        bool isUppercaseLetter( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClassTable[characterClass_BMP[codepoint]] & 0b00000000100000000000);
			//if (codepoint < 131072)
			//	return (characterClassTable[characterClass_SMP[codepoint - 65536]] & 0b00000000100000000000);
			return false;
		}
		
		bool isLowercaseLetter( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClassTable[characterClass_BMP[codepoint]] & 0b00000000001000000000);
			//if (codepoint < 131072)
			//	return (characterClassTable[characterClass_SMP[codepoint - 65536]] & 0b00000000001000000000);
			return false; // TODO
		}
        
        bool isLetter( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClassTable[characterClass_BMP[codepoint]] & 0b00000000000100000000);
			//if (codepoint < 131072)
			//	return (characterClassTable[characterClass_SMP[codepoint - 65536]] & 0b00000000000100000000);
			return false; // TODO
		}
        
        bool isPunctuation( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClass_BMP[codepoint] == internalCharacterClass::PUN);
			//if (codepoint < 131072)
			//	return (characterClass_SMP[codepoint - 65536] == internalCharacterClass::PUN);
			return false;
		}
        
        bool isNonSpacingModifier( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClass_BMP[codepoint] == internalCharacterClass::NMO);
			//if (codepoint < 131072)
			//	return (characterClass_SMP[codepoint - 65536] == internalCharacterClass::NMO);
			return false;
		}
        
        bool isSymbol( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClassTable[characterClass_BMP[codepoint]] & 0b00001000000000000000);
			//if (codepoint < 131072)
			//	return (characterClassTable[characterClass_SMP[codepoint - 65536]] & 0b00001000000000000000);
			return false;
		}
        
        bool isGraphicCharacter( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (characterClassTable[characterClass_BMP[codepoint]] & 0b00011111111111111100);
			return false; // TODO
		}
        
        bool isUnassigned( const uint32_t codepoint )
        {
			if (codepoint < 65536) 
				return (!(characterClassTable[characterClass_BMP[codepoint]]));
			//if (codepoint < 131072) 
			//	return (!(characterClass_SMP[codepoint - 65536]));
			//
			if (codepoint < 917504) // TODO
				return true;
			//if (codepoint < 983040) // TODO
			//	return (!(characterClass_SMP[codepoint - 917504]));
			return true;
		}
        
        bool isNonCharacter( const uint32_t codepoint )
        {
			if (codepoint < 65536)
				return (characterClass_BMP[codepoint] == internalCharacterClass::NON);
			if ((codepoint & 65535) > 65533) return true;
			return false;
		}
        
        uint32_t uppercase( const uint32_t codepoint ) //TODO
        {
            if (codepoint < 1416) return unicodeUppercase_0To1415[codepoint];
            if (codepoint > 42560)
            {
				if (codepoint < 43008) return unicodeUppercase_42786To43007(codepoint);
				if (codepoint <= 42785) return codepoint;
				if (codepoint < 43968) return unicodeUppercase_42560To43967(codepoint);
				if (codepoint <= 65344) return codepoint;
				if (codepoint < 68851) return unicodeUppercase_65345To68850(codepoint);
				if (codepoint <= 71871) return codepoint;
				if (codepoint < 125252) return unicodeUppercase_71872To125251(codepoint);
			}
			return codepoint;
            
            if ((codepoint > 5111) && (codepoint < 5118)) // Cherokee
                return (codepoint - 8);
/*
* 11312 - 11358 :: -48 (glagolitic)
* 11393 - 11491 [odd] :: -1 (coptic)    

* 9372 - 9397 :: +117876 (parenthesized letters)
* 9424 - 9449 :: -26 (circled letters)    
    
* 8560 - 8575 :: -16 (roman nums.)
*/
        }
        
        uint32_t lowercase( const uint32_t codepoint ) //TODO
        {
            if (codepoint < 1416) return unicodeLowercase_0To1415[codepoint];
            
            return codepoint;
        }
        
        /*uint32_t titlecase( const uint32_t codepoint ) // TODO
        {
		}

		uint32_t plain( const uint32_t codepoint ) // TODO
		{
		}*/
		
        namespace UTF8
        {
            uint32_t decode2Bytes( const byte * string, 
                                   const size_t position, 
                                   const size_t stringSize )
            {
                if ((position + 1) >= stringSize) 
                    return ((position < stringSize) ? string[position] : 0);
                return codepointFrom2UTF8Bytes(string, position);
            }
            
            uint32_t decode3Bytes( const byte * string, 
                                   const size_t position, 
                                   const size_t stringSize )
            {
                if ((position + 2) >= stringSize) 
                    return ((position < stringSize) ? string[position] : 0);
                return codepointFrom3UTF8Bytes(string, position);
            }
            
            uint32_t decode4Bytes( const byte * string, 
                                   const size_t position, 
                                   const size_t stringSize )
            {
                if ((position + 3) >= stringSize) 
                    return ((position < stringSize) ? string[position] : 0);
                return codepointFrom4UTF8Bytes(string, position);
            }
            
            uint32_t decode( const byte * string, 
                             const size_t position, 
                             const size_t stringSize )
            {
                if (position >= stringSize) return 0;
                const byte character = string[position];
                if (character & 128)
                {
					if (character > 193)
					{
						if ((character < 224) && (stringSize > (position + 1)))
							return codepointFrom2UTF8Bytes(string, position);
						if ((character < 240) && (stringSize > (position + 2)))
							return codepointFrom3UTF8Bytes(string, position);
						if ((character < 245) && (stringSize > (position + 3)))
							return codepointFrom4UTF8Bytes(string, position);
					}
					return 26;
				}
                return character;
            }
            
            bool encodeAs2Bytes( const uint32_t character, 
                                 byte * string,
                                 const size_t position,
                                 const size_t stringSize )
            {
                if ((position + 1) >= stringSize) return 0;
                codepointTo2UTF8Bytes(character, string, position);
                return (character > 0x7F);
            }

            bool encodeAs3Bytes( const uint32_t character, 
                                 byte * string,
                                 const size_t position,
                                 const size_t stringSize )
            {
                if ((position + 2) >= stringSize) return 0;
                codepointTo3UTF8Bytes(character, string, position);
                return (character > 0x7FF);
            }

            bool encodeAs4Bytes( const uint32_t character, 
                                 byte * string,
                                 const size_t position,
                                 const size_t stringSize )
            {
                if ((position + 3) >= stringSize) return 0;
                codepointTo4UTF8Bytes(character, string, position);
                return (character > 0xFFFF);
            }

            byte encode( const uint32_t character, 
                         byte * string,
                         const size_t position,
                         const size_t stringSize )
            {
                if (position >= stringSize) return 0;
                if (character <= 0x7F)
                {
                    string[position] = character;
                    return 1;
                }
                if (character <= 0x7FF) 
                {
                    codepointTo2UTF8Bytes(character, string, position);
                    return 2;
                }
                if (character <= 0xFFFF) 
                {
                    codepointTo3UTF8Bytes(character, string, position);
                    return 3;
                }
                else 
                {
                    codepointTo4UTF8Bytes(character, string, position);
                    return 4;
                }
            }
            
            std::string encode( const uint32_t character )
            {
                byte buffer[5] = {0, 0, 0, 0, 0};
                if (character <= 0x7F) buffer[0] = character;
                else if (character <= 0x7FF) codepointTo2UTF8Bytes(character, buffer, 0);
                else if (character <= 0xFFFF) codepointTo3UTF8Bytes(character, buffer, 0);
                else codepointTo4UTF8Bytes(character, buffer, 0);
                return std::string((char *)(buffer));
            }

            bool isValid( const byte * string, 
                          const size_t position, 
                          const size_t stringSize )
            {
                if (position >= stringSize) return false;
                byte size = sequenceSize(string[position]);
                if ((position + size) >= stringSize) return false;
                if ((size >= 2) && (!isContinuationByte(string[position + 1])))
                    return false;
                if ((size >= 3) && (!isContinuationByte(string[position + 2])))
                    return false;
                if (size >= 4)
                {
                    if (!isContinuationByte(string[position + 3])) return false;
                    if (decode(string, position, stringSize) > 0x10FFFF) return false;
                }
                return true;
            }

            bool isValid( const byte * string, const size_t stringSize )
            {
                byte character, expectedContinuationBytes = 0;
                for (size_t i = 0; i < stringSize; i++)
                {
                    character = string[i];
                    if ((character > 0xF4) || (character == 0xC0) || (character == 0xC1))
                        return false;
                    if (expectedContinuationBytes)
                    {
                        if ((character & 0xC0) != 0x80) return false;
                        expectedContinuationBytes--;
                    }
                    else 
                    {
						if ((character & 0xC0) == 0x80) return false;
						else expectedContinuationBytes = sequenceSize(character) - 1;
					}
                    if ((string[i] == 0) && (i < (stringSize - 1))) return false;
                    if (expectedContinuationBytes)
                        if (isNonCharacter(decode(string, i, stringSize))) return false;
                }
                if (expectedContinuationBytes) return false;
                return true;
            }
            
            void replaceInvalidBytes( byte * string, const size_t stringSize = ((size_t)(-1)) )
            {
				bool stopAtNUL = (stringSize == ((size_t)(-1))), brokenSequence = false;
				byte character, expectedContinuationBytes = 0;
				for (size_t i = 0, j; i < stringSize; i++)
				{
					character = string[i];
					if (stopAtNUL && (!character)) break;
					if ((character > 0xF4) || (character == 0xC0) || (character == 0xC1))
						string[i] = 26;
					else if ((!expectedContinuationBytes) && ((character & 0xC0) == 0x80))
						string[i] = 26;
					else if (character > 193)
					{
						expectedContinuationBytes = (sequenceSize(character) - 1);
						if (!expectedContinuationBytes) continue;
						for (brokenSequence = false, j = 1; j <= expectedContinuationBytes; j++)
							brokenSequence |= ((string[i + j] & 0xC0) != 0x80);
						if (brokenSequence)
						{
							string[i] = 26;
							expectedContinuationBytes = 0;
						}
					}
				}
			}
        }
    }
}
